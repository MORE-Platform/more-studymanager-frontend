openapi: 3.0.2
info:
  version: 1.0.0
  title: StudyManager API
security:
  - OAuth:
      - read
      - write
servers:
  - url: https://localhost:8080/api/v1
    description: Local Test Server
paths:
  /components/{componentType}:
    get:
      tags:
        - components
      operationId: listComponents
      description: List component of certain type
      parameters:
        - name: componentType
          in: path
          schema:
            type: string
            enum:
              - action
              - trigger
              - observation
          required: true
      responses:
        '200':
          description: Components successfully returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ComponentFactory'

  /components/{componentType}/{componentId}/validate:
    post:
      tags:
        - components
      description: check if properties are valid for component
      operationId: validateProperties
      parameters:
        - name: componentType
          in: path
          schema:
            type: string
            enum:
              - action
              - trigger
              - observation
          required: true
        - name: componentId
          in: path
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Validation report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationReport'
        '404':
          description: Not found

  /components/{componentType}/{componentId}/web-component.js:
    get:
      tags:
        - components
      operationId: getWebComponentScript
      description: Get web component script
      parameters:
        - name: componentType
          in: path
          schema:
            type: string
            enum:
              - action
              - trigger
              - observation
          required: true
        - name: componentId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Returned script successfully
          content:
            text/javascript:
              schema:
                type: string
        '404':
          description: Not found

  /studies:
    post:
      tags:
        - studies
      operationId: createStudy
      description: Create a new study
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Study'
      responses:
        '201':
          description: Study successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Study'
        '400':
          description: Study creation failed
        '500':
          description: Error
    get:
      tags:
        - studies
      description: List all studies
      operationId: listStudies
      responses:
        '200':
          description: Successfully listed all studies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Study'
        '404':
          description: Not found

  /studies/{studyId}:
    get:
      tags:
        - studies
      description: Get study information
      operationId: getStudy
      parameters:
        - $ref: '#/components/parameters/StudyId'
      responses:
        '200':
          description: Successfully returned study information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Study'
        '404':
          description: Not found
    put:
      tags:
        - studies
      description: Update a study
      operationId: updateStudy
      parameters:
        - $ref: '#/components/parameters/StudyId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Study'
      responses:
        '200':
          description: Successfully updated study
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Study'
        '400':
          description: Could not update study
        '404':
          description: Not found
    delete:
      tags:
        - studies
      description: Delete a study
      operationId: deleteStudy
      parameters:
        - $ref: '#/components/parameters/StudyId'
      responses:
        '200':
          description: Study deleted
        '404':
          description: Not found

  /studies/{studyId}/status:
    parameters:
      - $ref: '#/components/parameters/StudyId'
    put:
      tags:
        - studies
      operationId: setStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusChange'
      responses:
        '202':
          description: Status changed deleted
        '400':
          description: Bad request

  /studies/{studyId}/collaborators:
    parameters:
      - $ref: '#/components/parameters/StudyId'
    get:
      tags:
        - collaborators
      operationId: listStudyCollaborators
      description: List the collaborators of a study
      responses:
        '200':
          description: the list of collaborators
          content:
            application/json:
              schema:
                title: CollaboratorsList
                type: array
                items:
                  $ref: '#/components/schemas/Collaborator'

  /studies/{studyId}/collaborators/{uid}:
    parameters:
      - $ref: '#/components/parameters/StudyId'
      - name: uid
        in: path
        schema:
          type: string
    get:
      tags:
        - collaborators
      operationId: getStudyCollaboratorRoles
      description: Retrieve the collaborator-details
      responses:
        '200':
          description: the collaborator-details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaboratorDetails'
        '404':
          description: unknown uid
    put:
      tags:
        - collaborators
      operationId: setStudyCollaboratorRoles
      description: Set/Update the collaborator-roles of a user for the study
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StudyRole'
              uniqueItems: true
              minItems: 0
      responses:
        '200':
          description: the updated collaborator-details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaboratorDetails'
        '400':
          description: invalid roles list
        '409':
          description: role update failed
        '404':
          description: unknown uid

    delete:
      tags:
        - collaborators
      operationId: clearStudyCollaboratorRoles
      description: Remove the provided User (uid) from the collaborators
      responses:
        '204':
          description: Cleared
        '409':
          description: removal failed

  /studies/{studyId}/studyGroups:
    post:
      tags:
        - studyGroups
      operationId: createStudyGroup
      description: Create a new study group
      parameters:
        - $ref: '#/components/parameters/StudyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudyGroup'
      responses:
        '201':
          description: Study group successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyGroup'
        '400':
          description: Study group creation failed
        '500':
          description: Error
    get:
      tags:
        - studyGroups
      description: List all study groups for a study
      operationId: listStudyGroups
      parameters:
        - $ref: '#/components/parameters/StudyId'
      responses:
        '200':
          description: Successfully listed all study groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudyGroup'
        '404':
          description: Not found

  /studies/{studyId}/studyGroups/{studyGroupId}:
    get:
      tags:
        - studyGroups
      description: Get study group information
      operationId: getStudyGroup
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/StudyGroupId'
      responses:
        '200':
          description: Successfully returned study group information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyGroup'
        '404':
          description: Not found
    put:
      tags:
        - studyGroups
      description: Update a study group
      operationId: updateStudyGroup
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/StudyGroupId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudyGroup'
      responses:
        '200':
          description: Successfully updated study group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyGroup'
        '400':
          description: Could not update study group
        '404':
          description: Not found
    delete:
      tags:
        - studyGroups
      description: Delete a study group
      operationId: deleteStudyGroup
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/StudyGroupId'
      responses:
        '200':
          description: Study group deleted
        '404':
          description: Not found

  /studies/{studyId}/participants:
    post:
      tags:
        - participants
      description: Create participants for study
      operationId: createParticipants
      parameters:
        - $ref: '#/components/parameters/StudyId'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Participant'
          text/csv:
            schema:
              type: string
              description: csv
        required: true
      responses:
        '201':
          description: created participant
          content:
            application/json:
              schema:
                type: array
                description: list all participants
                items:
                  $ref: '#/components/schemas/Participant'
        '500':
          description: Error
    put:
      tags:
        - participants
      description: Update participants for study
      operationId: updateParticipantList
      parameters:
        - $ref: '#/components/parameters/StudyId'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Participant'
        required: true
      responses:
        '201':
          description: updated participants
          content:
            application/json:
              schema:
                type: array
                description: list all participants
                items:
                  $ref: '#/components/schemas/Participant'
        '500':
          description: Error
    get:
      tags:
        - participants
      description: List participants for study
      operationId: listParticipants
      parameters:
        - $ref: '#/components/parameters/StudyId'
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Participant'
        '404':
          description: Not found

  /studies/{studyId}/participants/{participantId}:
    get:
      tags:
        - participants
      description: get participant properties
      operationId: getParticipant
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/ParticipantId'
      responses:
        '200':
          description: successfully updated participant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        '404':
          description: not found
    put:
      tags:
        - participants
      description: update participant properties
      operationId: updateParticipant
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/ParticipantId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Participant'
      responses:
        '200':
          description: successfully updated participant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        '400':
          description: could not update participant
        '404':
          description: not found
    delete:
      tags:
        - participants
      description: Delete participant
      operationId: deleteParticipant
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/ParticipantId'
      responses:
        '200':
          description: >
            participant could not be deleted because it was already activated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        '204':
          description: participant deleted
        '500':
          description: Error

  /studies/{studyId}/observations:
    post:
      tags:
        - observations
      description: Add Observation
      operationId: addObservation
      parameters:
        - $ref: '#/components/parameters/StudyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Observation'

      responses:
        '200':
          description: Observations added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'

        '400':
          description: Could not add observations
    get:
      tags:
        - observations
      description: List Observations
      operationId: listObservations
      parameters:
        - $ref: '#/components/parameters/StudyId'
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Observation'
        '404':
          description: not found
  /studies/{studyId}/observations/{observationId}:
    put:
      tags:
        - observations
      description: update observation
      operationId: updateObservation
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/ObservationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Observation'
      responses:
        '200':
          description: observation successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'

        '400':
          description: could not update observation
        '404':
          description: not found
    delete:
      tags:
        - observations
      description: Delete observation
      operationId: deleteObservation
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/ObservationId'
      responses:
        '204':
          description: Successfully deleted observation
        '404':
          description: not found
        '500':
          description: Error

  /studies/{studyId}/interventions:
    post:
      tags:
        - interventions
      description: Add Intervention
      operationId: addIntervention
      parameters:
        - $ref: '#/components/parameters/StudyId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Intervention'

      responses:
        '200':
          description: Intervention added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Intervention'

        '400':
          description: Could not add intervention
    get:
      tags:
        - interventions
      description: List Interventions
      operationId: listInterventions
      parameters:
        - $ref: '#/components/parameters/StudyId'
      responses:
        '200':
          description: intervention successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Intervention'
        '404':
          description: not found

  /studies/{studyId}/interventions/{interventionId}:
    put:
      tags:
        - interventions
      description: update intervention
      operationId: updateIntervention
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/InterventionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Intervention'
      responses:
        '200':
          description: intervention successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Intervention'
    get:
      tags:
        - interventions
      description: Get Intervention
      operationId: getIntervention
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/InterventionId'
      responses:
        '200':
          description: intervention successful returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Intervention'
        '404':
          description: not found

    delete:
      tags:
        - interventions
      description: Delete intervention
      operationId: deleteIntervention
      parameters:
        - $ref: '#/components/parameters/StudyId'
        - $ref: '#/components/parameters/InterventionId'
      responses:
        '204':
          description: Successfully deleted intervention
        '404':
          description: not found
        '500':
          description: Error

  /studies/{studyId}/interventions/{interventionId}/trigger:
    parameters:
      - $ref: '#/components/parameters/StudyId'
      - $ref: '#/components/parameters/InterventionId'
    get:
      tags:
        - interventions
      description: Get trigger
      operationId: getTrigger
      responses:
        '200':
          description: trigger returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
        '400':
          description: bad request
    put:
      tags:
        - interventions
      description: Update trigger
      operationId: updateTrigger
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
      responses:
        '200':
          description: trigger updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
        '400':
          description: bad request

  /studies/{studyId}/interventions/{interventionId}/actions:
    parameters:
      - $ref: '#/components/parameters/StudyId'
      - $ref: '#/components/parameters/InterventionId'
    get:
      tags:
        - interventions
      description: List actions
      operationId: listActions
      responses:
        '200':
          description: action updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
        '400':
          description: bad request
    post:
      tags:
        - interventions
      description: Create action
      operationId: createAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
      responses:
        '200':
          description: action created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        '400':
          description: bad request
  /studies/{studyId}/interventions/{interventionId}/actions/{actionId}:
    parameters:
      - $ref: '#/components/parameters/StudyId'
      - $ref: '#/components/parameters/InterventionId'
      - $ref: '#/components/parameters/ActionId'
    get:
      tags:
        - interventions
      description: Get action
      operationId: getAction
      responses:
        '200':
          description: action returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        '400':
          description: bad request
    put:
      tags:
        - interventions
      description: Update action
      operationId: updateAction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
      responses:
        '200':
          description: action updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        '400':
          description: bad request
    delete:
      tags:
        - interventions
      description: Delete action
      operationId: deleteAction
      responses:
        '204':
          description: action deleted successfully
        '400':
          description: bad request

  /studies/{studyId}/import/participants:
    parameters:
      - $ref: '#/components/parameters/StudyId'
    post:
      tags:
        - importExport
      description: Import Participants
      operationId: importParticipants
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: import was successful
        '400':
          description: bad request

  /studies/{studyId}/export/participants:
    parameters:
      - $ref: '#/components/parameters/StudyId'
    get:
      tags:
        - importExport
      description: Export Participants
      operationId: exportParticipants
      responses:
        '200':
          description: foo
          content:
            text/csv:
              schema:
                type: string
                format: binary
        '400':
          description: bad request

  /users/me:
    get:
      tags:
        - users
      description: retrieve the current user
      operationId: getCurrentUser
      responses:
        '200':
          description: "user-info/profile of the current user"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUser'
  /users/search:
    get:
      tags:
        - users
      description: find & list users
      operationId: findUsers
      parameters:
        - name: q
          in: query
          schema:
            type: string
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: users matching the query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResultList'

components:
  schemas:
    ComponentFactory:
      type: object
      properties:
        componentId:
          type: string
          readOnly: true
        title:
          type: string
        description:
          type: string
        defaultProperties:
          type: object
        hasWebComponent:
          type: boolean

    ValidationReport:
      type: object
      properties:
        valid:
          type: boolean
        errors:
          type: array
          items:
            $ref: ValidationReportItem
        warnings:
          type: array
          items:
            $ref: ValidationReportItem

    ValidationReportItem:
      type: object
      properties:
        message:
          type: string
        type:
          type: string

    Study:
      type: object
      properties:
        studyId:
          $ref: '#/components/schemas/StudyId'
        title:
          type: string
        purpose:
          type: string
        participantInfo:
          type: string
        consentInfo:
          type: string
        status:
          $ref: '#/components/schemas/StudyStatus'
        start:
          type: string
          format: date
          readOnly: true
        end:
          type: string
          format: date
          readOnly: true
        plannedStart:
          type: string
          format: date
        plannedEnd:
          type: string
          format: date
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true
        userRoles:
          type: array
          description: the roles the _current user_ has within _this_ study.
          items:
            $ref: '#/components/schemas/StudyRole'
          uniqueItems: true
          readOnly: true
          minItems: 1

    StatusChange:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/StudyStatus'

    StudyStatus:
      type: string
      enum:
        - draft
        - active
        - paused
        - closed
      readOnly: true
      default: draft

    StudyGroup:
      type: object
      properties:
        studyId:
          $ref: '#/components/schemas/StudyId'
        studyGroupId:
          $ref: '#/components/schemas/Id'
        title:
          type: string
        purpose:
          type: string
        numberOfParticipants:
          type: integer
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true

    Participant:
      type: object
      properties:
        studyId:
          $ref: '#/components/schemas/StudyId'
        participantId:
          $ref: '#/components/schemas/Id'
        alias:
          type: string
        studyGroupId:
          $ref: '#/components/schemas/Id'
        registrationToken:
          type: string
          readOnly: true
        status:
          $ref: '#/components/schemas/ParticipantStatus'
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true

    ParticipantStatus:
      type: string
      enum:
        - new
        - active
        - abandoned
        - kicked_out
        - locked
      default: new

    Observation:
      type: object
      properties:
        studyId:
          $ref: '#/components/schemas/StudyId'
        observationId:
          $ref: '#/components/schemas/Id'
        studyGroupId:
          $ref: '#/components/schemas/IdReference'
        title:
          type: string
        purpose:
          type: string
        participantInfo:
          type: string
        type:
          type: string
        properties:
          type: object
        schedule:
          $ref: './Event.yaml/#/components/schemas/Event'
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true

    Intervention:
      type: object
      properties:
        studyId:
          $ref: '#/components/schemas/StudyId'
        interventionId:
          $ref: '#/components/schemas/Id'
        studyGroupId:
          $ref: '#/components/schemas/IdReference'
        title:
          type: string
        purpose:
          type: string
        schedule:
          $ref: './Event.yaml/#/components/schemas/Event'
        trigger:
          $ref: '#/components/schemas/Trigger'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true

    Trigger:
      type: object
      readOnly: true
      properties:
        type:
          type: string
        properties:
          type: object
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true

    Action:
      type: object
      properties:
        actionId:
          $ref: '#/components/schemas/Id'
        type:
          type: string
        properties:
          type: object
        created:
          type: string
          format: date-time
          readOnly: true
        modified:
          type: string
          format: date-time
          readOnly: true

    StudyId:
      type: integer
      format: int64
      readOnly: true

    Id:
      type: integer
      format: int32
      readOnly: true

    IdReference:
      type: integer
      format: int32

    UserSearchResultList:
      type: object
      properties:
        query:
          type: object
          properties:
            q:
              type: string
            offset:
              type: integer
              default: 0
            limit:
              type: integer
              default: 10
        result:
          type: object
          properties:
            numFound:
              type: integer
              format: int64
            start:
              type: integer
              default: 0
            users:
              type: array
              items:
                $ref: '#/components/schemas/UserInfo'
          required:
            - numFound
            - users
      required:
        - query
        - result

    UserInfo:
      description: |
        Basic user-profile in the MORE Platform
      type: object
      properties:
        uid:
          type: string
          readOnly: true
        name:
          type: string
          readOnly: true
        institution:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
      required:
        - uid
      readOnly: true

    CurrentUser:
      description: |
        The currently logged-in user
      allOf:
        - $ref: '#/components/schemas/UserInfo'
        - type: object
          properties:
            completeProfile:
              type: boolean
              default: false
              readOnly: true
            roles:
              type: array
              items:
                $ref: '#/components/schemas/PlatformRole'
              uniqueItems: true
              readOnly: true
            links:
              title: ProfileLinks
              type: object
              properties:
                profile:
                  type: string
                  format: uri
                  readOnly: true
                userManagement:
                  type: string
                  format: uri
                  readOnly: true
              readOnly: true
          required:
            - roles
            - links
          readOnly: true

    Collaborator:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInfo'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/StudyRole'
          uniqueItems: true
          readOnly: true
      required:
        - user
        - roles
      readOnly: true

    CollaboratorDetails:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInfo'
        roles:
          type: array
          items:
            title: CollaboratorRoleDetails
            type: object
            properties:
              role:
                $ref: '#/components/schemas/StudyRole'
              assignedBy:
                $ref: '#/components/schemas/UserInfo'
              assignedAt:
                type: string
                format: date-time
            required:
              - role
              - assignedAt
            readOnly: true
          uniqueItems: true
          readOnly: true
      required:
        - user
        - roles
      readOnly: true

    PlatformRole:
      description: |
        We differentiate between the following roles within a study:
        * `MORE_ADMIN` (_System Administrator_, _Platform Administrator_): Rights to manage users, emergency functions, **no rights to see data or manipulate studies**.
        * `MORE_OPERATOR`: Can create/initiate a new Study
        * `MORE_VIEWER`: Can access existing studies (based on assigned study-level roles)
      type: string
      enum:
        - MORE_ADMIN
        - MORE_OPERATOR
        - MORE_VIEWER
      externalDocs:
        url: https://more-platform.atlassian.net/browse/MORE-213

    StudyRole:
      description: |
        We differentiate between the following roles within a study:
        * `STUDY_ADMIN` (_Study Administrator_): **All** rights to create and manage studies, configure components and assign participants, invite and manage operators and viewers and see study data.
        * `STUDY_OPERATOR` (_Study Operator_): Rights to manage studies, configure components and assign participants, **no rights to see data**.
        * `STUDY_VIEWER` (_Study Viewer_): Rights to see study data only.
      type: string
      enum:
        - STUDY_ADMIN
        - STUDY_OPERATOR
        - STUDY_VIEWER
      externalDocs:
        url: https://more-platform.atlassian.net/browse/MORE-213

  parameters:
    StudyId:
      name: studyId
      in: path
      schema:
        $ref: '#/components/schemas/StudyId'
      required: true
    StudyGroupId:
      name: studyGroupId
      in: path
      schema:
        type: integer
        format: int32
      required: true
    ParticipantId:
      name: participantId
      in: path
      schema:
        type: integer
        format: int32
      required: true
    ObservationId:
      name: observationId
      in: path
      schema:
        type: integer
        format: int32
      required: true
    InterventionId:
      name: interventionId
      in: path
      schema:
        type: integer
        format: int32
      required: true
    ActionId:
      name: actionId
      in: path
      schema:
        type: integer
        format: int32
      required: true

  securitySchemes:
    OAuth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://auth.more.redlink.io/authorize #TODO
          scopes:
            read: read studies
            write: write studies
